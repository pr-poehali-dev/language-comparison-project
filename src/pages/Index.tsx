import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

const Index = () => {
  const [activeSection, setActiveSection] = useState('home');

  const scrollToSection = (sectionId: string) => {
    setActiveSection(sectionId);
    const element = document.getElementById(sectionId);
    element?.scrollIntoView({ behavior: 'smooth' });
  };

  const languageFeatures = {
    python: {
      name: 'Python',
      color: 'bg-cyan text-white',
      icon: 'üêç',
      description: '–í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π',
      pros: [
        '–ü—Ä–æ—Å—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å',
        '–û–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–±–ª–∏–æ—Ç–µ–∫',
        '–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ML/AI',
        '–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
      ],
      cons: [
        '–ú–µ–¥–ª–µ–Ω–Ω–µ–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º—ã—Ö —è–∑—ã–∫–æ–≤',
        'GIL –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å',
        '–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏'
      ],
      useCases: ['Data Science', 'Web —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'ML/AI'],
      codeExample: `def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

result = [fibonacci(i) for i in range(10)]
print(result)  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`
    },
    java: {
      name: 'Java',
      color: 'bg-orange text-white',
      icon: '‚òï',
      description: '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å–æ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π',
      pros: [
        '–ü–ª–∞—Ç—Ñ–æ—Ä–º–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (JVM)',
        '–°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è',
        '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        '–ë–æ–ª—å—à–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞'
      ],
      cons: [
        '–ú–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å',
        '–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
        '–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏'
      ],
      useCases: ['Enterprise –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'Android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã', 'Big Data'],
      codeExample: `public class Fibonacci {
    public static int calculate(int n) {
        if (n <= 1) return n;
        return calculate(n - 1) + calculate(n - 2);
    }
    
    public static void main(String[] args) {
        for (int i = 0; i < 10; i++) {
            System.out.print(calculate(i) + " ");
        }
    }
}`
    },
    cpp: {
      name: 'C++',
      color: 'bg-purple text-white',
      icon: '‚ö°',
      description: '–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ —Å –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
      pros: [
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–∞–º—è—Ç–∏',
        '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–¥–∏–≥–º',
        '–ë–ª–∏–∑–æ—Å—Ç—å –∫ –∂–µ–ª–µ–∑—É'
      ],
      cons: [
        '–°–ª–æ–∂–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å',
        '–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é',
        '–î–æ–ª–≥–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è',
        '–í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞'
      ],
      useCases: ['–ò–≥—Ä—ã', '–°–∏—Å—Ç–µ–º–Ω–æ–µ –ü–û', 'Embedded —Å–∏—Å—Ç–µ–º—ã', 'High-frequency trading'],
      codeExample: `#include <iostream>
#include <vector>

int fibonacci(int n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    std::vector<int> result;
    for (int i = 0; i < 10; i++) {
        result.push_back(fibonacci(i));
    }
    return 0;
}`
    }
  };

  const performanceData = [
    { test: '–í—ã—á–∏—Å–ª–µ–Ω–∏—è', python: 100, java: 45, cpp: 12 },
    { test: '–†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é', python: 150, java: 80, cpp: 25 },
    { test: 'I/O –æ–ø–µ—Ä–∞—Ü–∏–∏', python: 85, java: 60, cpp: 30 },
    { test: '–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å', python: 180, java: 50, cpp: 20 }
  ];

  return (
    <div className="min-h-screen bg-background">
      <nav className="sticky top-0 z-50 backdrop-blur-lg bg-background/80 border-b border-border">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold gradient-text">CodeCompare</h1>
            <div className="hidden md:flex gap-6">
              {['home', 'comparison', 'python', 'java', 'cpp', 'performance', 'examples'].map((section) => (
                <button
                  key={section}
                  onClick={() => scrollToSection(section)}
                  className={`transition-colors hover:text-primary capitalize ${
                    activeSection === section ? 'text-primary' : 'text-muted-foreground'
                  }`}
                >
                  {section === 'home' ? '–ì–ª–∞–≤–Ω–∞—è' : 
                   section === 'comparison' ? '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ' :
                   section === 'performance' ? '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' :
                   section === 'examples' ? '–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞' :
                   section.toUpperCase()}
                </button>
              ))}
            </div>
          </div>
        </div>
      </nav>

      <section id="home" className="py-20 px-4">
        <div className="container mx-auto max-w-6xl">
          <div className="text-center animate-fade-in">
            <h2 className="text-6xl font-bold mb-6 gradient-text">
              –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            </h2>
            <p className="text-xl text-muted-foreground mb-8 max-w-3xl mx-auto">
              –ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Python, Java –∏ C++. –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–π —è–∑—ã–∫ –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
            </p>
            <div className="flex gap-4 justify-center flex-wrap">
              <Button size="lg" onClick={() => scrollToSection('comparison')} className="hover-scale">
                <Icon name="GitCompare" className="mr-2" size={20} />
                –°—Ä–∞–≤–Ω–∏—Ç—å —è–∑—ã–∫–∏
              </Button>
              <Button size="lg" variant="outline" onClick={() => scrollToSection('performance')} className="hover-scale">
                <Icon name="Zap" className="mr-2" size={20} />
                –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
              </Button>
            </div>
          </div>

          <div className="grid md:grid-cols-3 gap-6 mt-16 animate-slide-up">
            {Object.entries(languageFeatures).map(([key, lang]) => (
              <Card key={key} className="hover-scale cursor-pointer" onClick={() => scrollToSection(key)}>
                <CardHeader>
                  <div className="flex items-center gap-3 mb-2">
                    <span className="text-4xl">{lang.icon}</span>
                    <CardTitle>{lang.name}</CardTitle>
                  </div>
                  <CardDescription>{lang.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {lang.useCases.slice(0, 2).map((use) => (
                      <Badge key={use} variant="secondary">{use}</Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      <section id="comparison" className="py-20 px-4 bg-muted/30">
        <div className="container mx-auto max-w-6xl">
          <h2 className="text-4xl font-bold mb-12 text-center gradient-text">–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</h2>
          
          <div className="grid md:grid-cols-3 gap-6">
            {Object.entries(languageFeatures).map(([key, lang]) => (
              <Card key={key} className="animate-scale-in">
                <CardHeader className={`${lang.color} rounded-t-lg`}>
                  <div className="flex items-center gap-2">
                    <span className="text-3xl">{lang.icon}</span>
                    <CardTitle className="text-white">{lang.name}</CardTitle>
                  </div>
                </CardHeader>
                <CardContent className="mt-6 space-y-6">
                  <div>
                    <h4 className="font-semibold mb-3 flex items-center gap-2">
                      <Icon name="ThumbsUp" size={18} className="text-green-500" />
                      –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
                    </h4>
                    <ul className="space-y-2">
                      {lang.pros.map((pro, idx) => (
                        <li key={idx} className="text-sm flex items-start gap-2">
                          <Icon name="Check" size={16} className="text-green-500 mt-0.5" />
                          <span>{pro}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div>
                    <h4 className="font-semibold mb-3 flex items-center gap-2">
                      <Icon name="ThumbsDown" size={18} className="text-orange-500" />
                      –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏
                    </h4>
                    <ul className="space-y-2">
                      {lang.cons.map((con, idx) => (
                        <li key={idx} className="text-sm flex items-start gap-2">
                          <Icon name="X" size={16} className="text-orange-500 mt-0.5" />
                          <span>{con}</span>
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-3 flex items-center gap-2">
                      <Icon name="Lightbulb" size={18} className="text-cyan" />
                      –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
                    </h4>
                    <div className="flex flex-wrap gap-2">
                      {lang.useCases.map((use) => (
                        <Badge key={use} className={lang.color}>{use}</Badge>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      <section id="python" className="py-20 px-4">
        <LanguageDetail language={languageFeatures.python} />
      </section>

      <section id="java" className="py-20 px-4 bg-muted/30">
        <LanguageDetail language={languageFeatures.java} />
      </section>

      <section id="cpp" className="py-20 px-4">
        <LanguageDetail language={languageFeatures.cpp} />
      </section>

      <section id="performance" className="py-20 px-4 bg-muted/30">
        <div className="container mx-auto max-w-6xl">
          <h2 className="text-4xl font-bold mb-12 text-center gradient-text">–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h2>
          <p className="text-center text-muted-foreground mb-12 max-w-3xl mx-auto">
            –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ). –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏.
          </p>

          <div className="space-y-8">
            {performanceData.map((test, idx) => (
              <Card key={idx} className="animate-fade-in hover-scale">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon name="Activity" size={20} className="text-primary" />
                    {test.test}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <PerformanceBar label="Python" value={test.python} max={200} color="bg-cyan" icon="üêç" />
                    <PerformanceBar label="Java" value={test.java} max={200} color="bg-orange" icon="‚òï" />
                    <PerformanceBar label="C++" value={test.cpp} max={200} color="bg-purple" icon="‚ö°" />
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          <Card className="mt-12 animate-scale-in">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Icon name="Info" size={20} className="text-primary" />
                –í—ã–≤–æ–¥—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-3 gap-4">
                <div className="p-4 rounded-lg bg-cyan/10 border border-cyan/20">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-2xl">üêç</span>
                    <h4 className="font-semibold">Python</h4>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    –û–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NumPy, Cython –∏–ª–∏ PyPy.
                  </p>
                </div>
                
                <div className="p-4 rounded-lg bg-orange/10 border border-orange/20">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-2xl">‚òï</span>
                    <h4 className="font-semibold">Java</h4>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ —É–¥–æ–±—Å—Ç–≤–æ–º. JIT-–∫–æ–º–ø–∏–ª—è—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞.
                  </p>
                </div>
                
                <div className="p-4 rounded-lg bg-purple/10 border border-purple/20">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-2xl">‚ö°</span>
                    <h4 className="font-semibold">C++</h4>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á. –¢—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –æ—Ç–ª–∞–¥–∫—É.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>

      <section id="examples" className="py-20 px-4">
        <div className="container mx-auto max-w-6xl">
          <h2 className="text-4xl font-bold mb-12 text-center gradient-text">–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞</h2>
          <p className="text-center text-muted-foreground mb-12">
            –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –∑–∞–¥–∞—á–∞: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏
          </p>

          <Tabs defaultValue="python" className="w-full">
            <TabsList className="grid w-full grid-cols-3 mb-8">
              <TabsTrigger value="python" className="gap-2">
                <span>üêç</span> Python
              </TabsTrigger>
              <TabsTrigger value="java" className="gap-2">
                <span>‚òï</span> Java
              </TabsTrigger>
              <TabsTrigger value="cpp" className="gap-2">
                <span>‚ö°</span> C++
              </TabsTrigger>
            </TabsList>

            {Object.entries(languageFeatures).map(([key, lang]) => (
              <TabsContent key={key} value={key} className="animate-fade-in">
                <Card>
                  <CardHeader className={`${lang.color} rounded-t-lg`}>
                    <CardTitle className="text-white flex items-center gap-2">
                      <span className="text-2xl">{lang.icon}</span>
                      {lang.name}
                    </CardTitle>
                    <CardDescription className="text-white/80">
                      –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="mt-6">
                    <pre className="bg-muted p-4 rounded-lg overflow-x-auto">
                      <code className="text-sm font-mono">{lang.codeExample}</code>
                    </pre>
                  </CardContent>
                </Card>
              </TabsContent>
            ))}
          </Tabs>
        </div>
      </section>

      <footer className="py-12 px-4 border-t border-border">
        <div className="container mx-auto max-w-6xl text-center">
          <p className="text-muted-foreground mb-4">
            –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
          </p>
          <div className="flex gap-6 justify-center text-sm text-muted-foreground">
            <a href="#home" className="hover:text-primary transition-colors">–ì–ª–∞–≤–Ω–∞—è</a>
            <a href="#comparison" className="hover:text-primary transition-colors">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ</a>
            <a href="#performance" className="hover:text-primary transition-colors">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</a>
            <a href="#examples" className="hover:text-primary transition-colors">–ü—Ä–∏–º–µ—Ä—ã</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

const LanguageDetail = ({ language }: { language: typeof languageFeatures.python }) => (
  <div className="container mx-auto max-w-4xl animate-fade-in">
    <div className="text-center mb-12">
      <div className="inline-flex items-center gap-4 mb-4">
        <span className="text-6xl">{language.icon}</span>
        <h2 className="text-5xl font-bold gradient-text">{language.name}</h2>
      </div>
      <p className="text-xl text-muted-foreground">{language.description}</p>
    </div>

    <div className="grid md:grid-cols-2 gap-6">
      <Card className="hover-scale">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="Star" size={20} className="text-yellow-500" />
            –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-3">
            {language.pros.map((pro, idx) => (
              <li key={idx} className="flex items-start gap-2">
                <Icon name="ChevronRight" size={18} className="text-primary mt-1" />
                <span>{pro}</span>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>

      <Card className="hover-scale">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon name="AlertCircle" size={20} className="text-orange" />
            –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-3">
            {language.cons.map((con, idx) => (
              <li key={idx} className="flex items-start gap-2">
                <Icon name="Minus" size={18} className="text-muted-foreground mt-1" />
                <span>{con}</span>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>
    </div>

    <Card className="mt-6 hover-scale">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Icon name="Briefcase" size={20} className="text-primary" />
          –û–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex flex-wrap gap-3">
          {language.useCases.map((use) => (
            <Badge key={use} variant="outline" className={`${language.color} text-lg px-4 py-2`}>
              {use}
            </Badge>
          ))}
        </div>
      </CardContent>
    </Card>
  </div>
);

const PerformanceBar = ({ label, value, max, color, icon }: { 
  label: string; 
  value: number; 
  max: number; 
  color: string; 
  icon: string;
}) => {
  const percentage = (value / max) * 100;
  
  return (
    <div>
      <div className="flex justify-between items-center mb-2">
        <span className="font-medium flex items-center gap-2">
          <span>{icon}</span>
          {label}
        </span>
        <span className="text-sm text-muted-foreground">{value}ms</span>
      </div>
      <div className="h-8 bg-muted rounded-full overflow-hidden">
        <div 
          className={`h-full ${color} transition-all duration-1000 ease-out flex items-center justify-end px-3`}
          style={{ width: `${percentage}%` }}
        >
          <span className="text-xs font-bold text-white">{value}ms</span>
        </div>
      </div>
    </div>
  );
};

export default Index;
